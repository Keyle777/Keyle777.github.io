<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Quartz-定时任务的简单使用.md</title>
      <link href="/posts/2f3b81ad/"/>
      <url>/posts/2f3b81ad/</url>
      
        <content type="html"><![CDATA[<h1 id="quartz的分享"><a class="markdownIt-Anchor" href="#quartz的分享"></a> Quartz的分享</h1><blockquote><p>前言：定时任务的使用，是我们在平时开发项目的过程中经常要用到的，如果你使用的是<strong>Spring boot</strong>开发那么常用的可能是它本身自带的<strong>Scheduled Tasks</strong>，它的使用也是非常简单，下面我也介绍了常用的方法。</p><p>今天我要分享的主要是关于<strong>Quartz</strong>在项目中的使用，这一部分在<strong>Scheduled Tasks</strong>介绍后有所介绍。</p></blockquote><p>Spring Boot提供了一种方便的方式来创建和管理定时任务，这就是Spring框架中的Scheduled Tasks。Scheduled Tasks是一种基于注解的方式，让开发人员可以轻松地创建和管理定时任务。</p><p>在Spring Boot中，你可以使用@Scheduled注解来标注一个方法，使其成为一个定时任务。@Scheduled注解可以接收一个cron表达式或者一个固定的时间间隔，以指定任务的执行时间。</p><p>下面是一个使用@Scheduled注解创建定时任务的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyScheduledTask</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 0 0 * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runTask</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 任务执行的逻辑代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，@Scheduled注解标注的runTask()方法是一个每天凌晨执行的定时任务。其中，cron表达式<code>0 0 0 * * ?</code>表示每天的0点0分0秒执行。</p><p>除了cron表达式，@Scheduled注解还支持其他的参数，例如：</p><ul><li>fixedRate：以固定的时间间隔执行任务，无论任务执行的时间是多少。</li><li>fixedDelay：以固定的时间间隔执行任务，任务执行完成后再等待指定时间间隔后再次执行任务。</li><li>initialDelay：指定任务第一次执行的延迟时间。</li></ul><p>下面是一个使用fixedRate参数创建定时任务的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyScheduledTask</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(fixedRate = 5000)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runTask</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 任务执行的逻辑代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，@Scheduled注解标注的runTask()方法是一个每5秒执行一次的定时任务。其中，fixedRate参数表示任务执行的时间间隔为5秒，无论任务执行的时间是多少。</p><p>Spring Boot的Scheduled Tasks可以方便地管理和执行定时任务，使得开发人员可以专注于业务逻辑的实现。同时，Spring Boot还提供了一些有用的工具类和方法，例如TaskScheduler和CronSequenceGenerator等，以更好地支持定时任务的创建和管理。</p><hr /><h2 id="创建任务"><a class="markdownIt-Anchor" href="#创建任务"></a> 创建任务</h2><p>首先，创建某个任务类，使它<strong>实现Job接口</strong>，重写其**execute()**方法，内部写上自定义业务，即完成了任务的创建。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AddTmEsMsg addTmEsMsg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(MyJob.class);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 程序启动后执行删除es中的所有文档数据，然后再将新数据添加至文档。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JobExecutionException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">indexName</span> <span class="operator">=</span> PropertiesUtil.getProperty(<span class="string">&quot;elasticsearch.index&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;开始执行 deleteTransferData 方法...&quot;</span>);</span><br><span class="line">            addTmEsMsg.deleteTransferData(indexName);</span><br><span class="line">            logger.info(<span class="string">&quot;deleteTransferData 方法执行完毕&quot;</span>);</span><br><span class="line">            logger.info(<span class="string">&quot;开始执行 addTransferDataToEs 方法...&quot;</span>);</span><br><span class="line">            addTmEsMsg.addTransferDataToEs(indexName);</span><br><span class="line">            logger.info(<span class="string">&quot;addTransferDataToEs 方法执行完毕&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JobExecutionException</span>(<span class="string">&quot;无法执行作业&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用任务"><a class="markdownIt-Anchor" href="#调用任务"></a> 调用任务</h2><h4 id="单个任务"><a class="markdownIt-Anchor" href="#单个任务"></a> 单个任务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EsRunner</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(EsRunner.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SchedulerFactoryBean schedulerFactoryBean;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;启动调度器...&quot;</span>);</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> schedulerFactoryBean.getScheduler();</span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(MyJob.class).withIdentity(<span class="string">&quot;myJob&quot;</span>, <span class="string">&quot;group1&quot;</span>).build();</span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;myTrigger&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .startNow()</span><br><span class="line">                .build();</span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">        logger.info(<span class="string">&quot;任务已经启动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><h4 id="多个任务"><a class="markdownIt-Anchor" href="#多个任务"></a> 多个任务</h4><p>如果您需要调度多个任务，您可以考虑使用Quartz的<code>JobDetail</code>和<code>Trigger</code>来实现。您可以为每个任务创建一个<code>JobDetail</code>和一个<code>Trigger</code>，然后将它们添加到调度器中以便执行。</p><p>以下是一个示例，演示如何调度多个任务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SchedulerFactoryBean schedulerFactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;启动调度器...&quot;</span>);</span><br><span class="line">    <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> schedulerFactoryBean.getScheduler();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建第一个任务</span></span><br><span class="line">    <span class="type">JobDetail</span> <span class="variable">jobDetail1</span> <span class="operator">=</span> JobBuilder.newJob(MyJob1.class).withIdentity(<span class="string">&quot;myJob1&quot;</span>, <span class="string">&quot;group1&quot;</span>).build();</span><br><span class="line">    <span class="type">Trigger</span> <span class="variable">trigger1</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">            .withIdentity(<span class="string">&quot;myTrigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">            .startNow()</span><br><span class="line">            .build();</span><br><span class="line">    scheduler.scheduleJob(jobDetail1, trigger1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建第二个任务</span></span><br><span class="line">    <span class="type">JobDetail</span> <span class="variable">jobDetail2</span> <span class="operator">=</span> JobBuilder.newJob(MyJob2.class).withIdentity(<span class="string">&quot;myJob2&quot;</span>, <span class="string">&quot;group1&quot;</span>).build();</span><br><span class="line">    <span class="type">Trigger</span> <span class="variable">trigger2</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">            .withIdentity(<span class="string">&quot;myTrigger2&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">            .startNow()</span><br><span class="line">            .build();</span><br><span class="line">    scheduler.scheduleJob(jobDetail2, trigger2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建第三个任务</span></span><br><span class="line">    <span class="type">JobDetail</span> <span class="variable">jobDetail3</span> <span class="operator">=</span> JobBuilder.newJob(MyJob3.class).withIdentity(<span class="string">&quot;myJob3&quot;</span>, <span class="string">&quot;group1&quot;</span>).build();</span><br><span class="line">    <span class="type">Trigger</span> <span class="variable">trigger3</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">            .withIdentity(<span class="string">&quot;myTrigger3&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">            .startNow()</span><br><span class="line">            .build();</span><br><span class="line">    scheduler.scheduleJob(jobDetail3, trigger3);</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">&quot;所有任务已经启动&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们创建了三个任务，并将它们添加到调度器中以便执行。每个任务都有一个独立的<code>JobDetail</code>和<code>Trigger</code>，并且它们都属于同一个组。您可以根据需要创建更多的任务，并将它们添加到调度器中。</p><p>请注意，这个示例中的<code>MyJob1</code>、<code>MyJob2</code>和<code>MyJob3</code>是自定义的任务类，您需要根据自己的需求来实现它们。这些任务类应该实现<code>Job</code>接口，并且需要在<code>execute</code>方法中实现任务的具体逻辑。</p><p>重写<strong>run()<strong>方法，加入自定义的任务并在类上加入</strong>@component</strong>交由Spring容器管理的对象管理，即可在程序启动的时候执行我们的任务。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156/"/>
      <url>/posts/4a17b156/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
